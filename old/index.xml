<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Old content on</title><link>/old/</link><description>Recent content in Old content on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Sep 2017 22:25:17 +1100</lastBuildDate><atom:link href="/old/index.xml" rel="self" type="application/rss+xml"/><item><title>FAQ</title><link>/old/faq/</link><pubDate>Mon, 20 Mar 2017 19:35:35 +1100</pubDate><guid>/old/faq/</guid><description>General What is Dgraph? Dgraph is a istributed, low-latency, high throughput graph database, written in Go. It puts a lot of emphasis on good design, concurrency and minimizing network calls required to execute a query in a distributed environment.
Why build Dgraph? We think graph databases are currently second class citizens. They are not considered mature enough to be run as the sole database, and get run alongside other SQL/NoSQL databases.</description></item><item><title>Dgraph Database Overview</title><link>/old/dgraph-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/dgraph-overview/</guid><description>Dgraph is a horizontally scalable and distributed GraphQL database with a graph backend. Dgraph is built for the heavy transactional workloads required to power modern apps and websites, but it isnâ€™t limited to only these types of applications. Whether you are looking to power the backend of your app, create elastic search for your website, or build a new database purely for data analysis, Dgraph is up to the task. In fact, it is in production today in the following real-world scenarios:</description></item><item><title>Get Started - Quickstart Guide</title><link>/old/get-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/get-started/</guid><description>Note This is a quick start guide. Dgraph Designed from the ground up to be run in production, Dgraph is the native GraphQL database with a graph backend. It is open-source, scalable, distributed, highly available and lightning fast.
Dgraph cluster consists of different nodes (Zero, Alpha &amp;amp; Ratel), and each node serves a different purpose.
Dgraph Zero controls the Dgraph cluster, assigns servers to a group, and re-balances data between server groups.</description></item><item><title>Get Started with Dgraph - Advanced Text Search on Social Graphs</title><link>/old/tutorial-6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorial-6/</guid><description>Welcome to the sixth tutorial of getting started with Dgraph.
In the previous tutorial, we learned about building social graphs in Dgraph, by modeling tweets as an example. We queried the tweets using the hash and exact indices, and implemented a keyword-based search to find your favorite tweets using the term index and its functions.
In this tutorial, we&amp;rsquo;ll continue from where we left off and learn about advanced text search features in Dgraph.</description></item><item><title>Get Started with Dgraph - Basic Operations</title><link>/old/tutorial-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorial-2/</guid><description>Welcome to the second tutorial of getting started with Dgraph.
In the previous tutorial of getting started, we learned some of the basics of Dgraph. Including how to run the database, add new nodes and predicates, and query them back.
In this tutorial, we&amp;rsquo;ll build the above Graph and learn more about operations using the UID (Universal Identifier) of the nodes. Specifically, we&amp;rsquo;ll learn about:
Querying and updating nodes, deleting predicates using their UIDs.</description></item><item><title>Get Started with Dgraph - Basic Types and Operations</title><link>/old/tutorial-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorial-3/</guid><description>Welcome to the third tutorial of getting started with Dgraph.
In the previous tutorial, we learned about CRUD operations using UIDs. We also learned about traversals and recursive traversals.
In this tutorial, we&amp;rsquo;ll learn about Dgraph&amp;rsquo;s basic types and how to query for them. Specifically, we&amp;rsquo;ll learn about:
Basic data types in Dgraph. Querying for predicate values. Indexing. Filtering nodes. Reverse traversing. Check out the accompanying video:
Let&amp;rsquo;s start by building the graph of a simple blog application.</description></item><item><title>Get Started with Dgraph - Fuzzy Search on Social Graphs</title><link>/old/tutorial-7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorial-7/</guid><description>Welcome to the seventh tutorial of getting started with Dgraph.
In the previous tutorial, we learned about building advanced text searches on social graphs in Dgraph, by modeling tweets as an example. We queried the tweets using the fulltext and trigram indices and implemented full-text and regular expression search on the tweets.
In this tutorial, we&amp;rsquo;ll continue exploring Dgraph&amp;rsquo;s string querying capabilities using the twitter model from the fifth and the sixth tutorials.</description></item><item><title>Get Started with Dgraph - Introduction</title><link>/old/tutorial-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorial-1/</guid><description>Welcome to getting started with Dgraph.
Dgraph is an open-source, transactional, distributed, native Graph Database. Here is the first tutorial of the get started series on using Dgraph.
In this tutorial, we&amp;rsquo;ll learn how to build the following graph on Dgraph,
In the process, we&amp;rsquo;ll learn about:
Running Dgraph using the dgraph/standalone docker image. Running the following basic operations using Dgraph&amp;rsquo;s UI Ratel, Creating a node. Creating an edge between two nodes.</description></item><item><title>Get Started with Dgraph - Multi-language strings</title><link>/old/tutorial-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorial-4/</guid><description>Welcome to the fourth tutorial of getting started with Dgraph.
In the previous tutorial, we learned about Datatypes, Indexing, Filtering, and Reverse traversals in Dgraph.
In this tutorial, we&amp;rsquo;ll learn about using multi-language strings and operations on them using the language tags.
You can see the accompanying video below.
Strings and languages Strings values in Dgraph are of UTF-8 format. Dgraph also supports values for string predicate types in multiple languages.</description></item><item><title>Get Started with Dgraph - Native Geolocation Features</title><link>/old/tutorial-8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorial-8/</guid><description>Welcome to the eight tutorial of getting started with Dgraph.
In the previous tutorial, we learned about building a twitter-like user-search feature using Dgraph&amp;rsquo;s fuzzy search.
In this tutorial, we&amp;rsquo;ll build a graph of tourist locations around San Francisco and help our Zoologist friend, Mary, and her team in their mission to conserve birds using Dgraph&amp;rsquo;s geolocation capabilities.
You might have used Google to find the restaurants near you or to find the shopping centers within a mile of your current location.</description></item><item><title>Get Started with Dgraph - String Indices and Modeling Tweet Graph</title><link>/old/tutorial-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorial-5/</guid><description>Welcome to the fifth tutorial of getting started with Dgraph.
In the previous tutorial, we learned about using multi-language strings and operations on them using language tags.
In this tutorial, we&amp;rsquo;ll model tweets in Dgraph and, using it, we&amp;rsquo;ll learn more about string indices in Dgraph.
We&amp;rsquo;ll specifically learn about:
Modeling tweets in Dgraph. Using String indices in Dgraph Querying twitter users using the hash index. Comparing strings using the exact index.</description></item><item><title>Tips and Tricks with DQL</title><link>/old/tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tips/</guid><description>Get Sample Data Use the has function to get some sample nodes.
Query Go Java Python JavaScript (gRPC) JavaScript (HTTP) Curl Run Editing query... { result(func: has(director.film), first: 10) { uid expand(_all_) } } { result(func: has(director.film), first: 10) { uid expand(_all_) } } curl localhost:8080/query -XPOST -d 'blahblah' | python -m json.tool | less package main import ( "context" "flag" "fmt" "log" "github.com/dgraph-io/dgo" "github.com/dgraph-io/dgo/protos/api" "google.golang.org/grpc" ) var ( dgraph = flag.</description></item><item><title>Tutorials - Get Started with Dgraph series</title><link>/old/tutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/tutorials/</guid><description>Note This is a tutorial series on getting started with Dgraph. You can find a single page quickstart guide here. Welcome to Dgraph. Here are a series of tutorials for getting started:
1 - Introduction Run dgraph and learn about nodes and edges, as well as basic queries and mutations. 2 - Basic Operations Learn about UID operations, updating nodes, and traversals. 3 - Basic Types and Operations on them Learn about data types, indexing, filtering, and reverse traversals.</description></item></channel></rss>