<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Migration on</title><link>/old/migration/</link><description>Recent content in Migration on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Mar 2017 19:35:35 +1100</lastBuildDate><atom:link href="/old/migration/index.xml" rel="self" type="application/rss+xml"/><item><title>Loading CSV Data</title><link>/old/migration/loading-csv-data/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/old/migration/loading-csv-data/</guid><description>Dgraph mutations are accepted in RDF N-Quad and JSON formats. To load CSV-formatted data into Dgraph, first convert the dataset into one of the accepted formats and then load the resulting dataset into Dgraph. This section demonstrates converting CSV into JSON.
Tip Once you have converted your .csv files to RDF N-Quad/Triple or JSON, you can use Dgraph Live Loader or Dgraph Bulk Loader to import your data. There are many tools available to convert CSV to JSON.</description></item><item><title>Migration Tool</title><link>/old/migration/migrate-tool/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/old/migration/migrate-tool/</guid><description>With the Dgraph migration tool you can import SQL data into Dgraph by converting the SQL tables into a schema and RDF file, and then loading the resulting dataset into Dgraph.
Command-line options You can run the Dgraph migrate tool with:
dgraph migrate [flags] Options:
Usage: dgraph migrate [flags] Flags: --db string The database to import -h, --help help for migrate --host string The hostname or IP address of the database server.</description></item><item><title>Migrate from Dgraph v1.0</title><link>/old/migration/migrate-dgraph-1-1/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/old/migration/migrate-dgraph-1-1/</guid><description>This document summarizes major changes in Dgraph database that you should be aware of as you migrate your data and client applications from Dgraph v1.0 to newer Dgraph versions.
Schema types: scalar uid and list [uid] The semantics of predicates of type uid has changed since Dgraph v1.0. In Dgraph v1.0 all uid predicates implied a one-to-many relationship, but now you can express a one-to-one relationship or a one-to-many relationship. The following syntax example demonstrates both types of relationships:</description></item><item><title>Dgraph Compared to Other Databases</title><link>/old/migration/dgraph-compared-to-other-databases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/old/migration/dgraph-compared-to-other-databases/</guid><description>This guide compares Dgraph with other popular graph databases and datastores, to help you decide if Dgraph suits your needs. For more on how Dgraph compares to other cloud-based graph databases, see (https://dgraph.io/comparison).
Batch-based Batch based graph processing frameworks provide a very high throughput to do periodic processing of data. This is useful to convert graph data into a shape readily usable by other systems to then serve the data to end users.</description></item></channel></rss>