<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Get started with Rhize on</title><link>https://libremfg.github.io/</link><description>Recent content in Get started with Rhize on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Mar 2017 19:35:35 +1100</lastBuildDate><atom:link href="https://libremfg.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>3.0.0rc06</title><link>https://libremfg.github.io/releases/3-0-0rc06/</link><pubDate>Tue, 31 Oct 2023 21:07:43 -0300</pubDate><guid>https://libremfg.github.io/releases/3-0-0rc06/</guid><description>Release notes for version 3.0.0rc06 of the Rhize application.
Release date: October 31, 2023
Breaking changes NATS streams libreBpmn_command and LibreTimerStart must be deleted prior to starting Changes by service Core Features
Add mutation for dependency check for DataSource, Equipment, EquipmentClass, OperationalLocation, and OperationalLocationClass Changes
Change to go-module for schema Change struct literal unkeyed fields to keyed BPMN Breaking Changes
NATS streams libreBpmn_command and LibreTimerStart must be deleted prior to starting Features</description></item><item><title>What is Rhize?</title><link>https://libremfg.github.io/get-started/introduction/</link><pubDate>Tue, 26 Sep 2023 12:25:46 -0300</pubDate><guid>https://libremfg.github.io/get-started/introduction/</guid><description>Rhize is a real-time, event-driven manufacturing data hub. It unites data analysis, event monitoring, and process execution in one platform. Its interface and architecture is designed to conform to your processes. We assume nothing about what your manufacturing workflows look like.
Rhize has only one strong opinion: all data exchanged must be modeled on the ISA-95 standard. This standards-based schema is how Rhize connects every data event across an entire operation.</description></item><item><title>Overview</title><link>https://libremfg.github.io/concepts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/concepts/overview/</guid><description>Rhize is a real-time, Event-driven, Manufacturing Data Hub that has built-in Business Process Orchestration.
So what&amp;rsquo;s all that then?
Challenges For manufacturers, digitalization can bring numerous benefits, including increased productivity, improved efficiency, and enhanced decision-making capabilities. However, successful implementation must overcome many challenges:
Legacy Systems and Infrastructure: Many manufacturing facilities have outdated systems and equipment that may not be compatible with digital technologies. Integrating new digital solutions with existing infrastructure can be complex and require significant investments to upgrade or replace outdated systems.</description></item><item><title>Use the @default Directive</title><link>https://libremfg.github.io/how-to/query/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/how-to/query/default/</guid><description>The @default directive provides default values to be stored when not supplied in a mutation (add/update).
Here&amp;rsquo;s the GraphQL definition of the directives:
directive @default(add: DgraphDefault, update: DgraphDefault) on FIELD_DEFINITION input DgraphDefault { value: String } Syntax:
type Type { field: FieldType @default( add: {value: &amp;#34;value&amp;#34;} update: { value: &amp;#34;value&amp;#34;} ) } Where a value is not provided as input for a mutation, the add value will be used if the node is being created, and the update value will be used if the node exists and is being updated.</description></item><item><title>Realtime Database</title><link>https://libremfg.github.io/concepts/architecture/realtime-database/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/concepts/architecture/realtime-database/</guid><description>A real-time database is a type of database system that is designed to handle and process data in real-time or near real-time, meaning that data changes are immediately reflected and accessible to users or applications without any noticeable delay. These databases are commonly used in scenarios where data needs to be continuously updated and retrieved in a highly responsive manner.
Traditional databases, such as relational databases, are optimized for handling transactions and data consistency but may not be as efficient for real-time applications.</description></item><item><title>Data Hub Architecture</title><link>https://libremfg.github.io/concepts/architecture/data-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/concepts/architecture/data-hub/</guid><description>A data hub architecture is a centralized platform or infrastructure that serves as a hub for collecting, integrating, storing, and processing data from various sources within an organization. It provides a unified view of data and enables seamless data sharing and analysis across different systems and applications. In the context of manufacturing digitalization, a data hub architecture can help address several challenges:
Data Integration: Manufacturing facilities generate data from various sources, such as production equipment, sensors, supply chain systems, and quality control processes.</description></item><item><title>Event Driven Architecture</title><link>https://libremfg.github.io/concepts/architecture/eda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/concepts/architecture/eda/</guid><description>Event-driven architecture (EDA) is a software design pattern that focuses on the flow of events, notifications, and messages within a system to facilitate communication and interaction between different components or services. In EDA, systems are built to respond to events rather than following a strict procedural flow.
At the heart of is the concept of events. Events are discrete occurrences or notifications that represent changes or actions within a system. These events can include user actions, changes in data, external triggers, or any other meaningful incident.</description></item><item><title>Business Process Orchestration</title><link>https://libremfg.github.io/concepts/architecture/business-process-orchestration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/concepts/architecture/business-process-orchestration/</guid><description>Event orchestration is the coordination and management of various events, actions, and processes within a system or across multiple systems. It involves arranging and controlling the sequence of events to ensure that they occur in a logical and efficient manner, often to achieve a specific goal or outcome. Event orchestration is commonly used in various domains, including IT operations, business processes, and even in the context of cloud computing and automation.</description></item><item><title>The @generate Directive</title><link>https://libremfg.github.io/how-to/query/generate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/how-to/query/generate/</guid><description>The @generate directive is used to specify which GraphQL APIs are generated for a given type.
Here&amp;rsquo;s the GraphQL definition of the directive
input GenerateQueryParams { get: Boolean query: Boolean password: Boolean aggregate: Boolean } input GenerateMutationParams { add: Boolean update: Boolean delete: Boolean } directive @generate( query: GenerateQueryParams, mutation: GenerateMutationParams, subscription: Boolean) on OBJECT | INTERFACE The corresponding APIs are generated by setting the Boolean variables inside the @generate directive to true.</description></item><item><title>Overview</title><link>https://libremfg.github.io/deploy/install/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/install/overview/</guid><description>This guide walks you through how to Install Rhize and its services in a Kubernetes environment. You can also use these docs to model automation workflows in your CI.
This procedure aims to be as generic and vendor-neutral as possible. Some configuration depends on where and how you run your IT infrastructureâ€”what cloud provider you use, preferred auxiliary tools, and so on&amp;mdash;so your team must adapt the process for its particular use cases.</description></item><item><title>GraphQL Directives</title><link>https://libremfg.github.io/reference/directives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/reference/directives/</guid><description>The list of all directives supported by Rhize&amp;rsquo;s implementation of Dgraph.
@auth @auth allows you to define how to apply authorization rules on the queries/mutation for a type.
Reference: Auth directive
@cascade @cascade allows you to filter out certain nodes within a query.
Reference: Cascade
@custom @custom directive is used to define custom queries, mutations and fields.
Reference: Custom directive
@default The @default directive allows you to specify values that should be used when nil values are received for either add mutations or update mutations</description></item><item><title>Set up Kubernetes</title><link>https://libremfg.github.io/deploy/install/setup-kubernetes/</link><pubDate>Fri, 22 Sep 2023 14:49:53 -0300</pubDate><guid>https://libremfg.github.io/deploy/install/setup-kubernetes/</guid><description>This guide shows you how to install Rhize services on your Kubernetes cluster. You can also use this procedure as the model for an automation workflow in your CI.
Prerequisites Before starting, ensure that you have the following technical requirements.
Software requirements:
kubectl Helm Curl, or some similar program to make HTTP requests from the command line Access requirements:
Administrative privileges for a running Kubernetes cluster in your environment. Your organization must set this up.</description></item><item><title>3.0.0rc05</title><link>https://libremfg.github.io/releases/3-0-0rc05/</link><pubDate>Tue, 31 Oct 2023 20:32:34 -0300</pubDate><guid>https://libremfg.github.io/releases/3-0-0rc05/</guid><description>Release notes for version 3.0.0rc05 of the Rhize application.
Release date: October 24, 2023
Breaking changes Renamed UI environment variables and changed KEYCLOACK to KEYCLOAK Changes by service Core Features
Add deleteSyncEquipmentsFromDBtoNATSStatus mutation Add NATS connection name Add fields to InformationObject Fixes
Fix tracing typo Changes
Change Core to purge keys that are not in the the database Change core to delete property value from KV when the equipment no longer have active version BPMN Features</description></item><item><title>Back up the Graph DB</title><link>https://libremfg.github.io/deploy/backup/graphdb/</link><pubDate>Wed, 18 Oct 2023 11:01:46 -0300</pubDate><guid>https://libremfg.github.io/deploy/backup/graphdb/</guid><description>This guide shows you how to back up the Rhize Graph database. You can also use it to model an automation workflow.
Prerequisites Before you start, ensure you have the following:
A designated backup location, for example ~/rhize-backups/database. Access to your Rhize Kubernetes Environment Optional: kubectx utilities kubectx to manage multiple clusters kubens to switch between and configure namespaces easily Optional: the k8 Lens IDE, if you prefer to use Kubernetes graphically.</description></item><item><title>Events</title><link>https://libremfg.github.io/reference/bpmn/events/</link><pubDate>Tue, 26 Sep 2023 11:10:37 -0300</pubDate><guid>https://libremfg.github.io/reference/bpmn/events/</guid><description>Events are something that happen in the course of a process. In BPMN, events are drawn with circles.
In event-driven models, events can happen in one of three dimensions:
Start. All processes begin with some trigger that starts an event. Start events are drawn with a single thin circle.
Intermediate. Possible events between the start and end. Intermediate events might start from some trigger, or create some result. They are drawn with a double thin line.</description></item><item><title>Configure Keycloak</title><link>https://libremfg.github.io/deploy/install/keycloak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/install/keycloak/</guid><description>Rhize uses Keycloak as an OpenID provider. In your cluster, the Keycloak server to authenticate users, services, and manage Role-based access controls.
This topic describes how to set up Keycloak in your Rhize cluster. For a conceptual overview of the authentication flow, read About OpenID Connect
Prerequisites First, ensure that you have followed the instructions from Set up Kubernetes. All prerequisites for that step apply here.
Steps Follow these steps to configure a Keycloak realm and associate Rhize services to Keycloak clients, groups, roles, and policies.</description></item><item><title>Install Rhize services</title><link>https://libremfg.github.io/deploy/install/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/install/services/</guid><description>The final installation step is to install the Rhize services in your Kubernetes cluster.
Prerequisites This topic assumes you have Set up Kubernetes and Configured Keycloak. All the prerequisites for those topics apply here. Configure load balancing for the following DNS records: Service Domain Admin UI &amp;lt;CUSTOMER&amp;gt;-libre.libremfg.ai Keycloak &amp;lt;CUSTOMER&amp;gt;-auth.libremfg.ai GraphQL &amp;lt;CUSTOMER&amp;gt;-graphql.libremfg.ai NATS &amp;lt;CUSTOMER&amp;gt;-mqtt.libremfg.ai Highbyte &amp;lt;CUSTOMER&amp;gt;-highbyte.libremfg.ai Grafana &amp;lt;CUSTOMER&amp;gt;-grafana.libremfg.ai BPMN &amp;lt;CUSTOMER&amp;gt;-bpmn.libremfg.ai Overrides Each service is installed through a Helm YAML file. For some of these services, you might need to edit this file to add credential information and modify defaults.</description></item><item><title>Restore the GraphDB</title><link>https://libremfg.github.io/deploy/restore/graphdb/</link><pubDate>Thu, 19 Oct 2023 13:52:23 -0300</pubDate><guid>https://libremfg.github.io/deploy/restore/graphdb/</guid><description>This guide shows you how to restore the Graph database in your Rhize environment.
Prerequisites Before you start, ensure you have the following:
The GraphDB Helm chart kubectl A Database backup Steps Confirm the cluster and namespace are correct.
## context kubectl config current-context ## namespace kubectl get namespace Copy the tar file into the new Grafana Pod within the /var/lib/grafana/ directory.
kubectl cp ./local-dest-of-backup &amp;lt;grafana-pod&amp;gt;:/var/lib/grafana/ Uninstall the Helm chart:</description></item><item><title>How Rhize works</title><link>https://libremfg.github.io/get-started/how-rhize-works/</link><pubDate>Tue, 03 Oct 2023 19:39:39 -0300</pubDate><guid>https://libremfg.github.io/get-started/how-rhize-works/</guid><description>This article provides a high-level overview of how Rhize works, starting with data collection and ending with user interaction. To make these concepts more concrete, the final section provides examples of each process.
The heart of the Rhize platform is its manufacturing knowledge graph, which stores data from all levels of the operation and exposes this data through a single endpoint. Around the database are services that exchange messages and process events in real-time.</description></item><item><title>Activities</title><link>https://libremfg.github.io/reference/bpmn/activities/</link><pubDate>Tue, 26 Sep 2023 11:10:37 -0300</pubDate><guid>https://libremfg.github.io/reference/bpmn/activities/</guid><description>In BPMN, an activity is work performed within a business process.
On the Rhize platform, most activities are tasks, work that cannot be broken down into smaller levels of detail. Tasks are drawn with rectangles with rounded corners. Besides tasks, you can also use call activities, processes which call and invoke other processes.
As with Gateways and events, service and call activities types are marked by their icons.
Service task templates Service tasks have a gear icon marker</description></item><item><title>Gateways</title><link>https://libremfg.github.io/reference/bpmn/gateways/</link><pubDate>Tue, 26 Sep 2023 11:10:37 -0300</pubDate><guid>https://libremfg.github.io/reference/bpmn/gateways/</guid><description>Gateways control how sequence flows interact as they converge and diverge within a process. They represent mechanisms that either allow or disallow a passage.
BPMN notation represents gateways as diamonds with single thin lines, as is common in many diagrams with decision flows. Besides decisions, however, Rhize&amp;rsquo;s BPMN notation also includes parellel gateways.
As with Events and Activities, gateway types are marked by their icons.
Drawn as diamonds, gateways represent branches in a sequence flow.</description></item><item><title>Restore Grafana</title><link>https://libremfg.github.io/deploy/restore/grafana/</link><pubDate>Thu, 19 Oct 2023 13:52:23 -0300</pubDate><guid>https://libremfg.github.io/deploy/restore/grafana/</guid><description>This guide shows you how to restore Grafana in your Rhize environment.
Prerequisites Before you start, ensure you have the following:
kubectl A Grafana backup Steps Confirm the cluster and namespace are correct.
## context kubectl config current-context ## namespace kubectl get namespace Copy the Grafana data tar file into the new Grafana Pod within the /var/lib/grafana directory.
kubectl cp ./grafana-data-2023-11-01T16.05.53.tar.gz grafana-64cd6db6f4-8txc2:/var/lib/grafana/ Untar the file
tar -xvf grafana-data-2023-11-01T16.05.53.tar.gz --directory / Copy the Grafana configuration file into the new Grafana Pod in the /usr/share/grafana/conf directory.</description></item><item><title>Back up Grafana</title><link>https://libremfg.github.io/deploy/backup/grafana/</link><pubDate>Wed, 18 Oct 2023 11:01:56 -0300</pubDate><guid>https://libremfg.github.io/deploy/backup/grafana/</guid><description>This guide shows you the procedure to back up Grafana on your Rhize Kubernetes deployment. For general instructions, refer to the official Back up Grafana documentation.
Prerequisites Before you start, ensure you have the following:
A designated backup location, for example ~/rhize-backups/grafana. Access to the Rhize Kubernetes Environment Optional: kubectx utilities kubectx to manage multiple clusters kubens to switch between and configure namespaces easily Optional: the k8 Lens IDE, if you prefer to use Kubernetes graphically Also, before you start, confirm you are in the right context and namespace.</description></item><item><title>BPMN execution recovery</title><link>https://libremfg.github.io/deploy/restore/bpmn-nodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/restore/bpmn-nodes/</guid><description>To ensure high availability, Rhize services typically run in clusters. BPMN processes are one area where availability is critical, since the processes often have longer execution durations and many steps.
Through replication, BPMN execution continues in the event that a BPMN pod suddenly fails (for example through a panic or loss of power). As long as the remaining BPMN nodes are not at already full processing capacity, the Rhize system recovers and finishes execution.</description></item><item><title>Default local ports</title><link>https://libremfg.github.io/reference/default-ports/</link><pubDate>Thu, 02 Nov 2023 16:49:42 -0300</pubDate><guid>https://libremfg.github.io/reference/default-ports/</guid><description>After you install Rhize services, they are accessible, by default, on the following ports:
Service Default Port Admin UI localhost:3030 Grafana localhost:3001 Router localhost:4000 Keycloak localhost:8090 baas-alpha command line localhost:8080</description></item><item><title>Upgrade</title><link>https://libremfg.github.io/deploy/upgrade/</link><pubDate>Wed, 18 Oct 2023 15:02:24 -0300</pubDate><guid>https://libremfg.github.io/deploy/upgrade/</guid><description>This guide shows you how to upgrade Rhize.
Prerequisites Before you start, ensure you have the following:
Access to the Rhize Kubernetes Environment helm Optional: kubectx utilities kubectx to manage multiple clusters kubens to switch between and configure namespaces easily Optional: the k8 Lens IDE, if you prefer to use Kubernetes graphically Be sure that you notify relevant parties of the coming upgrade.
Procedure First, record the old and new versions, their context, and namespaces.</description></item><item><title>Agent configuration</title><link>https://libremfg.github.io/reference/agent-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/reference/agent-configuration/</guid><description>The Rhize agent collects data that is emitted in the manufacturing process and makes this data visible in the Rhize system. It works by connecting to equipment or groups of equipment that run over protocols such as OPC UA.
As the communication bridge between the Rhize Data Hub and your plant, the agent has multiple functions:
It subscribes to tags and republishes the changes in NATS. It creates an interface for the BPMN engine to send reads and writes to a data source and its associated equipment.</description></item><item><title>Glossary</title><link>https://libremfg.github.io/reference/glossary/</link><pubDate>Tue, 12 Sep 2023 19:35:35 +1100</pubDate><guid>https://libremfg.github.io/reference/glossary/</guid><description>The manufacturing industry has many specialized termsâ€”and many abbreviations. This glossary is a reference of how Rhize defines terms used in this documentation.
Agent The Rhize agent bridges your plant processes with the Rhize data hub. It collects data that is emitted during data the manufacturing process and publishes it to the NATS message broker. Andon A system that alerts manufacturing teams about problems in processes or quality. Business Process Model and Notation (BPMN) A standardized graphical notation used to represent business processes in an intuitive, visual way.</description></item><item><title>About OpenID connect</title><link>https://libremfg.github.io/deploy/about-openidconnect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/about-openidconnect/</guid><description>Rhize uses OpenIDConnect to connect to a Keycloak server to authenticate users and manage Role-based access controls.
Open ID Connect is a security architecture that uses JSON Web Tokens (JWTs) to access secured resources. JWT are issued by KeyCloak, and the users can be managed in KeyCloak, or managed in other services like LDAP, Google, Azure AD, Facebook, etc.
When a user accesses the user interface, the UI redirects to Keycloak.</description></item><item><title>Overview</title><link>https://libremfg.github.io/concepts/datahub/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/concepts/datahub/overview/</guid><description>Multi-site manufacturing businesses have a data governance problem.
If they implement data governance centrally, it&amp;rsquo;s difficult to get the people at each site aligned and in agreement. This leads to centrally governed reports that site personnel don&amp;rsquo;t use or, worse, are inaccurate.
If they implement data governance at the site level, it&amp;rsquo;s difficult to align data centrally to enable applications and analytics to be built once and deployed many times across sites.</description></item><item><title>Stream Data</title><link>https://libremfg.github.io/how-to/stream/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/how-to/stream/</guid><description>Stream data in and out of Rhize.
Publishing Changes with Change-Data-Capture You can use change data capture (CDC) to track data changes over time; including mutations and drops in your database. RHIZE&amp;rsquo;s CDC implementation lets you use Kafka, Nats or a local file as a sink to store CDC updates streamed by RHIZE&amp;rsquo;s Alpha leader nodes.
When CDC is enabled, RHIZE streams events for all set and delete mutations, except those that affect password fields; along with any drop events.</description></item></channel></rss>