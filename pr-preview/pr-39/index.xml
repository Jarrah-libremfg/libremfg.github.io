<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://libremfg.github.io/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 22 Nov 2023 09:43:30 -0300</lastBuildDate><atom:link href="https://libremfg.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>3.0.0rc07</title><link>https://libremfg.github.io/releases/3-0-0rc07/</link><pubDate>Wed, 15 Nov 2023 09:32:12 -0500</pubDate><guid>https://libremfg.github.io/releases/3-0-0rc07/</guid><description>Release notes for version 3.0.0rc07 of the Rhize application.
Release date: 15th November, 2023
Breaking changes [SCHEMA] Change types OperationalLocationClass, OperationalLocationClassVersion, OperationalLocationClassProperty, OperationalLocation, OperationalLocationVersion and OperationalLocationProperty to have: isPartOf (0..1), isMadeUpOf (0..*) [BPMN] Change CommandConsumer and Timers to use new JetStream library and durable consumers. This requires you to drop and re-create streams KV_JobResponses, KV_WorkflowSpecifications, libreBpmn_Command and libreTimerStart. Changes by service Admin UI Features
Add ability to create Process Segment Version Add ability to edit linked process segment resource specification property Add ability to link a Hierarchy Scope to a Operational Location Class version Add check for renaming a linked property with an existing property name Add Homepage screen Add optional link from Operational Location Class to a Operational Location Class version Add Physical Asset Properties Add Physical Asset Resource Specifications Change</description></item><item><title>What is Rhize?</title><link>https://libremfg.github.io/get-started/introduction/</link><pubDate>Tue, 26 Sep 2023 12:25:46 -0300</pubDate><guid>https://libremfg.github.io/get-started/introduction/</guid><description>Rhize is a real-time, event-driven manufacturing data hub. It unites data analysis, event monitoring, and process execution in one platform. Its interface and architecture is designed to conform to your processes. We assume nothing about what your manufacturing workflows look like.
Rhize has only one strong opinion: all data exchanged must be modeled on the ISA-95 standard. This standards-based schema is how Rhize connects every data event across an entire operation.</description></item><item><title>Create objects from the UI</title><link>https://libremfg.github.io/how-to/model/create-objects-ui/</link><pubDate>Mon, 20 Nov 2023 15:36:03 -0300</pubDate><guid>https://libremfg.github.io/how-to/model/create-objects-ui/</guid><description>To make a production object visible to the Rhize data hub, you must define it as a data model. Along with its API, Rhize also has a graphical interface to create and update objects in your role-based equipment hierarchy.
Often, one object references another: for example, a piece of equipment may belong to an equipment class, have a unit of measure as a property, and be associated with process segment. These associations form nodes and edges in your knowledge graph, so the more information relationships that you accurately create, the better.</description></item><item><title>Overview</title><link>https://libremfg.github.io/deploy/install/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/install/overview/</guid><description>This guide walks you through how to Install Rhize and its services in a Kubernetes environment. You can also use these docs to model automation workflows in your CI.
This procedure aims to be as generic and vendor-neutral as possible. Some configuration depends on where and how you run your IT infrastructureâ€”what cloud provider you use, preferred auxiliary tools, and so on&amp;mdash;so your team must adapt the process for its particular use cases.</description></item><item><title>Set up Kubernetes</title><link>https://libremfg.github.io/deploy/install/setup-kubernetes/</link><pubDate>Fri, 22 Sep 2023 14:49:53 -0300</pubDate><guid>https://libremfg.github.io/deploy/install/setup-kubernetes/</guid><description>This guide shows you how to install Rhize services on your Kubernetes cluster. You can also use this procedure as the model for an automation workflow in your CI.
Prerequisites Before starting, ensure that you have the following technical requirements.
Software requirements:
kubectl Helm Curl, or some similar program to make HTTP requests from the command line Access requirements:
Administrative privileges for a running Kubernetes cluster in your environment. Your organization must set this up.</description></item><item><title>3.0.0rc06</title><link>https://libremfg.github.io/releases/3-0-0rc06/</link><pubDate>Tue, 31 Oct 2023 21:07:43 -0300</pubDate><guid>https://libremfg.github.io/releases/3-0-0rc06/</guid><description>Release notes for version 3.0.0rc06 of the Rhize application.
Release date: October 31, 2023
Breaking changes NATS streams libreBpmn_command and LibreTimerStart must be deleted prior to starting Changes by service Core Features
Add mutation for dependency check for DataSource, Equipment, EquipmentClass, OperationalLocation, and OperationalLocationClass Changes
Change to go-module for schema Change struct literal unkeyed fields to keyed BPMN Breaking Changes
NATS streams libreBpmn_command and LibreTimerStart must be deleted prior to starting Features</description></item><item><title>Call the GraphQL API</title><link>https://libremfg.github.io/how-to/gql/call-the-graphql-api/</link><pubDate>Wed, 22 Nov 2023 09:43:30 -0300</pubDate><guid>https://libremfg.github.io/how-to/gql/call-the-graphql-api/</guid><description>In a manufacturing operation, all event data is interrelated. To make these relations explorable, Rhize stores data in a special-purpose graph database designed to represent all levels of the manufacturing process. This database is enforced by our ISA-95 schema, the most comprehensive data representation of ISA-95 in the world.
Rhize exposes this database through a GraphQL API. Unlike REST, GraphQL requires only one endpoint, and you can define exactly the data that you return for each operation.</description></item><item><title>Master definitions and fields</title><link>https://libremfg.github.io/how-to/model/master-definitions/</link><pubDate>Wed, 15 Nov 2023 16:29:21 -0300</pubDate><guid>https://libremfg.github.io/how-to/model/master-definitions/</guid><description>To make a production object visible to the Rhize data hub, you must define it as a data model.
These sections document all the objects that you can add through the UI, and the fields and properties that you can associate with them. All these models are based on the ISA-95 standard, mostly from Part 2, which describes the role-based equipment hierarchy.
Global object fields All objects that you define must have a unique name.</description></item><item><title>3.0.0rc05</title><link>https://libremfg.github.io/releases/3-0-0rc05/</link><pubDate>Tue, 31 Oct 2023 20:32:34 -0300</pubDate><guid>https://libremfg.github.io/releases/3-0-0rc05/</guid><description>Release notes for version 3.0.0rc05 of the Rhize application.
Release date: October 24, 2023
Breaking changes Renamed UI environment variables and changed KEYCLOACK to KEYCLOAK Changes by service Core Features
Add deleteSyncEquipmentsFromDBtoNATSStatus mutation Add NATS connection name Add fields to InformationObject Fixes
Fix tracing typo Changes
Change Core to purge keys that are not in the the database Change core to delete property value from KV when the equipment no longer have active version BPMN Features</description></item><item><title>Back up the Graph DB</title><link>https://libremfg.github.io/deploy/backup/graphdb/</link><pubDate>Wed, 18 Oct 2023 11:01:46 -0300</pubDate><guid>https://libremfg.github.io/deploy/backup/graphdb/</guid><description>This guide shows you how to back up the Rhize Graph database. You can also use it to model an automation workflow.
Prerequisites Before you start, ensure you have the following:
A designated backup location, for example ~/rhize-backups/database. Access to your Rhize Kubernetes Environment Optional: kubectx utilities kubectx to manage multiple clusters kubens to switch between and configure namespaces easily Optional: the k8 Lens IDE, if you prefer to use Kubernetes graphically.</description></item><item><title>Configure Keycloak</title><link>https://libremfg.github.io/deploy/install/keycloak/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/install/keycloak/</guid><description>Rhize uses Keycloak as an OpenID provider. In your cluster, the Keycloak server to authenticate users, services, and manage Role-based access controls.
This topic describes how to set up Keycloak in your Rhize cluster. For a conceptual overview of the authentication flow, read About OpenID Connect
Prerequisites First, ensure that you have followed the instructions from Set up Kubernetes. All prerequisites for that step apply here.
Steps Follow these steps to configure a Keycloak realm and associate Rhize services to Keycloak clients, groups, roles, and policies.</description></item><item><title>Install Rhize services</title><link>https://libremfg.github.io/deploy/install/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/install/services/</guid><description>The final installation step is to install the Rhize services in your Kubernetes cluster.
Prerequisites This topic assumes you have Set up Kubernetes and Configured Keycloak. All the prerequisites for those topics apply here. Configure load balancing for the following DNS records: Service Domain Admin UI &amp;lt;CUSTOMER&amp;gt;-libre.libremfg.ai Keycloak &amp;lt;CUSTOMER&amp;gt;-auth.libremfg.ai GraphQL &amp;lt;CUSTOMER&amp;gt;-graphql.libremfg.ai NATS &amp;lt;CUSTOMER&amp;gt;-mqtt.libremfg.ai Highbyte &amp;lt;CUSTOMER&amp;gt;-highbyte.libremfg.ai Grafana &amp;lt;CUSTOMER&amp;gt;-grafana.libremfg.ai BPMN &amp;lt;CUSTOMER&amp;gt;-bpmn.libremfg.ai Overrides Each service is installed through a Helm YAML file. For some of these services, you might need to edit this file to add credential information and modify defaults.</description></item><item><title>Restore the GraphDB</title><link>https://libremfg.github.io/deploy/restore/graphdb/</link><pubDate>Thu, 19 Oct 2023 13:52:23 -0300</pubDate><guid>https://libremfg.github.io/deploy/restore/graphdb/</guid><description>This guide shows you how to restore the Graph database in your Rhize environment.
Prerequisites Before you start, ensure you have the following:
The GraphDB Helm chart kubectl A Database backup Steps Confirm the cluster and namespace are correct.
## context kubectl config current-context ## namespace kubectl get namespace Change to the libre-baas helm chart overrides, baas.yaml. Set alpha.initContainers.init.enable to true.
Upgrade or install the Helm chart.
helm upgrade --install -f baas.</description></item><item><title>How Rhize works</title><link>https://libremfg.github.io/get-started/how-rhize-works/</link><pubDate>Tue, 03 Oct 2023 19:39:39 -0300</pubDate><guid>https://libremfg.github.io/get-started/how-rhize-works/</guid><description>This article provides a high-level overview of how Rhize works, starting with data collection and ending with user interaction. To make these concepts more concrete, the final section provides examples of each process.
The heart of the Rhize platform is its manufacturing knowledge graph, which stores data from all levels of the operation and exposes this data through a single endpoint. Around the database are services that exchange messages and process events in real-time.</description></item><item><title>Query, mutate, and subscribe</title><link>https://libremfg.github.io/how-to/gql/query-mutate-subscribe/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/how-to/gql/query-mutate-subscribe/</guid><description>This document provides examples for how to use the Rhize GraphQL API to query, update, and subscribe to objects in the Manufacturing data hub.
In GraphQL, an operation is a type of request to the server. Rhize supports three types of operations:
Queries return data and subsets of data. Mutations change the data on the server side. Subscriptions notify about data changes in real time. Queries Most queries start with these three verbs, each of which indicates the resources to return.</description></item><item><title>Restore Grafana</title><link>https://libremfg.github.io/deploy/restore/grafana/</link><pubDate>Thu, 19 Oct 2023 13:52:23 -0300</pubDate><guid>https://libremfg.github.io/deploy/restore/grafana/</guid><description>This guide shows you how to restore Grafana in your Rhize environment.
Prerequisites Before you start, ensure you have the following:
kubectl A Grafana backup Steps Confirm the cluster and namespace are correct:
## context kubectl config current-context ## namespace kubectl get namespace If a checksum file does not exist for the latest backups, create one:
sha256sum &amp;lt;LATEST_DATA_FILE&amp;gt;.tar.gz &amp;lt;LATEST_CONF_FILE&amp;gt;.tar.gz &amp;gt; backup.sums Copy the checksum file into the new Grafana Pod within the /home/grafana directory:</description></item><item><title>Back up Grafana</title><link>https://libremfg.github.io/deploy/backup/grafana/</link><pubDate>Wed, 18 Oct 2023 11:01:56 -0300</pubDate><guid>https://libremfg.github.io/deploy/backup/grafana/</guid><description>This guide shows you the procedure to back up Grafana on your Rhize Kubernetes deployment. For general instructions, refer to the official Back up Grafana documentation.
Prerequisites Before you start, ensure you have the following:
A designated backup location, for example ~/rhize-backups/grafana. Access to the Rhize Kubernetes Environment Optional: kubectx utilities kubectx to manage multiple clusters kubens to switch between and configure namespaces easily Optional: the k8 Lens IDE, if you prefer to use Kubernetes graphically Also, before you start, confirm you are in the right context and namespace.</description></item><item><title>Create BPMN workflows</title><link>https://libremfg.github.io/how-to/bpmn/create-workflow/</link><pubDate>Fri, 22 Sep 2023 14:50:39 -0300</pubDate><guid>https://libremfg.github.io/how-to/bpmn/create-workflow/</guid><description>This topic shows you how to use the BPMN UI to create event-driven workflows. To view the full list of elements and their parameters, refer to BPMN elements.
Prerequisites To create a workflow, you&amp;rsquo;ll need:
An installed environment Topics to publish and subscribe to The ability to call the GraphQL API and understand JSON. General procedures Every workflow is different, but the overall procedure usually works like this:
Create a start event:</description></item><item><title>Upgrade</title><link>https://libremfg.github.io/deploy/upgrade/</link><pubDate>Wed, 18 Oct 2023 15:02:24 -0300</pubDate><guid>https://libremfg.github.io/deploy/upgrade/</guid><description>This guide shows you how to upgrade Rhize.
Prerequisites Before you start, ensure you have the following:
Access to the Rhize Kubernetes Environment helm Optional: kubectx utilities kubectx to manage multiple clusters kubens to switch between and configure namespaces easily Optional: the k8 Lens IDE, if you prefer to use Kubernetes graphically Be sure that you notify relevant parties of the coming upgrade.
Procedure First, record the old and new versions, their context, and namespaces.</description></item><item><title>BMPN elements</title><link>https://libremfg.github.io/how-to/bpmn/bpmn-elements/</link><pubDate>Tue, 26 Sep 2023 11:10:37 -0300</pubDate><guid>https://libremfg.github.io/how-to/bpmn/bpmn-elements/</guid><description>These pages describe the elements to make a Rhize BPMN workflow, and their parameters to set conditions, use variables, and call services.
Rhize BPMN elements are based on the Business Process Model and Notation OMG Standard. While the visual grammar is functionally the same, we extend some elements for specific Rhize features, like service tasks that call the GraphQL API.
Each BPMN workflow is a process with an ID. Each process is made up events (circles), activities (rectangles), gateways (diamonds), and flows (arrows).</description></item><item><title>BPMN execution recovery</title><link>https://libremfg.github.io/deploy/restore/bpmn-nodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/restore/bpmn-nodes/</guid><description>BPMN processes often have longer execution durations and many steps. If a BPMN node suddenly fails (for example through a panic or loss of power), Rhize needs to ensure that the workflow completes.
To achieve high availability and resiliency, Rhize services run in Kubernetes nodes, and the NATS message broker typically has data replication. As long as the remaining BPMN nodes are not already at full processing capacity, if a BPMN node fails while executing a process, the Rhize system recovers and finishes the workflow.</description></item><item><title>Default local ports</title><link>https://libremfg.github.io/reference/default-ports/</link><pubDate>Thu, 02 Nov 2023 16:49:42 -0300</pubDate><guid>https://libremfg.github.io/reference/default-ports/</guid><description>After you install Rhize services, they are accessible, by default, on the following ports:
Service Default Port Admin UI localhost:3030 Grafana localhost:3001 Router localhost:4000 Keycloak localhost:8090 baas-alpha command line localhost:8080</description></item><item><title>Agent configuration</title><link>https://libremfg.github.io/reference/agent-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/reference/agent-configuration/</guid><description>The Rhize agent collects data that is emitted in the manufacturing process and makes this data visible in the Rhize system. It works by connecting to equipment or groups of equipment that run over protocols such as OPC UA.
As the communication bridge between the Rhize Data Hub and your plant, the agent has multiple functions:
It subscribes to tags and republishes the changes in NATS. It creates an interface for the BPMN engine to send reads and writes to a data source and its associated equipment.</description></item><item><title>Glossary</title><link>https://libremfg.github.io/reference/glossary/</link><pubDate>Tue, 12 Sep 2023 19:35:35 +1100</pubDate><guid>https://libremfg.github.io/reference/glossary/</guid><description>The manufacturing industry has many specialized termsâ€”and many abbreviations. This glossary is a reference of how Rhize defines terms used in this documentation.
Agent The Rhize agent bridges your plant processes with the Rhize data hub. It collects data that is emitted during the manufacturing process and publishes it to the NATS message broker. Andon A system that alerts manufacturing teams about problems in processes or quality. Business Process Model and Notation (BPMN) A standardized graphical notation used to represent business processes in an intuitive, visual way Catch event In BPMN, a catch event reacts to a trigger (compared to a throw event, which returns some result).</description></item><item><title>About OpenID connect</title><link>https://libremfg.github.io/deploy/about-openidconnect/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/deploy/about-openidconnect/</guid><description>Rhize uses OpenIDConnect to connect to a Keycloak server to authenticate users and manage Role-based access controls.
Open ID Connect is a security architecture that uses JSON Web Tokens (JWTs) to access secured resources. JWTs are issued by KeyCloak. Users can also be managed in KeyCloak. Or you can manage users in other services such as LDAP, Google, Azure AD, Facebook, etc.
The general authentication flow is as follows:
When a user accesses the user interface, the UI redirects to Keycloak.</description></item><item><title>Track changes (CDC)</title><link>https://libremfg.github.io/how-to/publish-subscribe/track-changes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/how-to/publish-subscribe/track-changes/</guid><description>You can use change data capture (CDC) to track data changes over time, including mutations and drops in your database. Rhize&amp;rsquo;s CDC implementation can use Kafka, Nats or a local file as a sink to store CDC updates streamed by Rhize&amp;rsquo;s Alpha leader nodes.
When CDC is enabled, Rhize streams events for:
All set and delete mutations, except those that affect password fields Drop events. Live Loader events are recorded by CDC, but Bulk Loader events aren&amp;rsquo;t.</description></item></channel></rss>