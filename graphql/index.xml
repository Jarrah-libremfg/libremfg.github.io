<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GraphQL on</title><link>/graphql/</link><description>Recent content in GraphQL on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/graphql/index.xml" rel="self" type="application/rss+xml"/><item><title>GraphQL Overview</title><link>/graphql/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/overview/</guid><description>Welcome to the official GraphQL documentation for Dgraph.
Designed from the ground up to be run in production, Dgraph is the native GraphQL database with a graph backend. It is open-source, scalable, distributed, highly available and lightning fast.
These docs tell you all the details. If you are looking for a walk through tutorial, then head over to our tutorials section. Dgraph gives you GraphQL. You&amp;rsquo;re always working with GraphQL, not a translation layer.</description></item><item><title>Quick Start</title><link>/graphql/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/quick-start/</guid><description>Let&amp;rsquo;s go from nothing to a running GraphQL API in just two steps.
For GraphQL in Dgraph, you just concentrate on defining the schema of your graph and how you&amp;rsquo;d like to search that graph; Dgraph does the rest. You work only with GraphQL and, think in terms of the graph that matters for your app.
This example is for an app about customers, products and reviews. That&amp;rsquo;s a pretty simple graph, with just three types of objects, but it has some interesting connections for us to explore.</description></item><item><title>How GraphQL works in Dgraph</title><link>/graphql/how-dgraph-graphql-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/how-dgraph-graphql-works/</guid><description>Dgraph is a GraphQL database. That means, with Dgraph, you design your application in GraphQL, you iterate on your app in GraphQL and, when you need it, you scale with GraphQL.
You design a set of GraphQL types that describes your requirements. Dgraph takes those types, prepares graph storage for them and generates a GraphQL API with queries and mutations.
You design a graph, store a graph and query a graph.</description></item><item><title>GraphQL Subscriptions</title><link>/graphql/subscriptions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/subscriptions/</guid><description>Subscriptions allow clients to listen to real-time messages from the server. The client connects to the server with a bi-directional communication channel using the WebSocket protocol and sends a subscription query that specifies which event it is interested in. When an event is triggered, the server executes the stored GraphQL query, and the result is sent back to the client using the same communication channel.
The client can unsubscribe by sending a message to the server.</description></item><item><title>Index of Directives in GraphQL</title><link>/graphql/directives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/directives/</guid><description>The list of all directives supported by Dgraph.
@auth @auth allows you to define how to apply authorization rules on the queries/mutation for a type.
Reference: Auth directive
@cascade @cascade allows you to filter out certain nodes within a query.
Reference: Cascade
@custom @custom directive is used to define custom queries, mutations and fields.
Reference: Custom directive
@deprecated The @deprecated directive lets you mark the schema definition of a field or enum value as deprecated, and also lets you provide an optional reason for the deprecation.</description></item><item><title>Administrative API on GraphQL</title><link>/graphql/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/admin/</guid><description>This article presents the Admin API and explains how to run a Dgraph database with GraphQL.
Running Dgraph with GraphQL The simplest way to start with Dgraph GraphQL is to run the all-in-one Docker image.
docker run -it -p 8080:8080 dgraph/standalone:master That brings up GraphQL at localhost:8080/graphql and localhost:8080/admin, but is intended for quickstart and doesn&amp;rsquo;t persist data.
Advanced options Once you&amp;rsquo;ve tried out Dgraph GraphQL, you&amp;rsquo;ll need to move past the dgraph/standalone and run and deploy Dgraph instances.</description></item><item><title>GraphQL on Existing Dgraph</title><link>/graphql/dgraph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/dgraph/</guid><description>How to use GraphQL on an existing Dgraph instance If you have an existing Dgraph instance and want to also expose GraphQL, you need to add a GraphQL schema that maps to your Dgraph schema. You don&amp;rsquo;t need to expose your entire Dgraph schema as GraphQL, but do note that adding a GraphQL schema can alter the Dgraph schema.
Dgraph&amp;rsquo;s native DQL syntax allows type and edge names that aren&amp;rsquo;t valid in GraphQL; so, you&amp;rsquo;ll often need to expose valid GraphQL names.</description></item><item><title>Apollo Federation</title><link>/graphql/federation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/federation/</guid><description>Dgraph supports Apollo federation starting in release version 21.03. This lets you create a gateway GraphQL service that includes the Dgraph GraphQL API and other GraphQL services.
Support for Apollo federation directives The current implementation supports the following five directives: @key, @extends, @external, @provides, and @requires.
@key directive This directive takes one field argument inside it: the @key field. There are few limitations on how to use @key directives:
Users can define the @key directive only once for a type Support for multiple key fields is not currently available.</description></item></channel></rss>