<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lambda Resolvers on</title><link>/graphql/lambda/</link><description>Recent content in Lambda Resolvers on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/graphql/lambda/index.xml" rel="self" type="application/rss+xml"/><item><title>Dgraph Lambda Overview</title><link>/graphql/lambda/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/lambda/overview/</guid><description>Lambda provides a way to write your custom logic in JavaScript, integrate it with your GraphQL schema, and execute it using the GraphQL API in a few easy steps:
Set up a Dgraph cluster with a working lambda server (not required for Dgraph Cloud users) Declare lambda queries, mutations, and fields in your GraphQL schema as needed Define lambda resolvers for them in a JavaScript file This also simplifies the job of developers, as they can build a complex backend that is rich with business logic, without setting up multiple different services.</description></item><item><title>Lambda Fields</title><link>/graphql/lambda/field/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/lambda/field/</guid><description>Schema To set up a lambda function, first you need to define it on your GraphQL schema by using the @lambda directive.
For example, to define a lambda function for the rank and bio fields in Author:
type Author { id: ID! name: String! @search(by: [hash, trigram]) dob: DateTime @search reputation: Float @search bio: String @lambda rank: Int @lambda isMe: Boolean @lambda } You can also define @lambda fields on interfaces, as follows:</description></item><item><title>Lambda Queries</title><link>/graphql/lambda/query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/lambda/query/</guid><description>Schema To set up a lambda query, first you need to define it on your GraphQL schema by using the @lambda directive.
Note get, query, and aggregate are reserved prefixes and they can&amp;rsquo;t be used to define Lambda queries. For example, to define a lambda query for Author that finds out authors given an author&amp;rsquo;s name:
type Author { id: ID! name: String! @search(by: [hash, trigram]) dob: DateTime reputation: Float } type Query { authorsByName(name: String!</description></item><item><title>Lambda Mutations</title><link>/graphql/lambda/mutation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/lambda/mutation/</guid><description>Schema To set up a lambda mutation, first you need to define it on your GraphQL schema by using the @lambda directive.
Note add, update, and delete are reserved prefixes and they can&amp;rsquo;t be used to define Lambda mutations. For example, to define a lambda mutation for Author that creates a new author with a default reputation of 3.0 given just the name:
type Author { id: ID! name: String! @search(by: [hash, trigram]) dob: DateTime reputation: Float } type Mutation { newAuthor(name: String!</description></item><item><title>Lambda Webhooks</title><link>/graphql/lambda/webhook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/lambda/webhook/</guid><description>Schema To set up a lambda webhook, you need to define it in your GraphQL schema by using the @lambdaOnMutate directive along with the mutation events (add/update/delete) you want to listen on.
Note Lambda webhooks only listen for events from the root mutation. You can create a schema that is capable of creating deeply nested objects, but only the parent level webhooks will be evoked for the mutation. For example, to define a lambda webhook for all mutation events (add/update/delete) on any Author object:</description></item><item><title>Lambda Server</title><link>/graphql/lambda/server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/lambda/server/</guid><description>In this article you&amp;rsquo;ll learn how to setup a Dgraph database with a lambda server.
Dgraph Lambda Dgraph Lambda is a serverless platform for running JavaScript on Dgraph and Dgraph Cloud.
You can download the latest version or review the implementation in our open-source repository.
Running with Docker To run a Dgraph Lambda server with Docker:
docker run -it --rm -p 8686:8686 -v /path/to/script.js:/app/script/script.js -e DGRAPH_URL=http://host.docker.internal:8080 dgraph/dgraph-lambda Note host.docker.internal doesn&amp;rsquo;t work on older versions of Docker on Linux.</description></item></channel></rss>