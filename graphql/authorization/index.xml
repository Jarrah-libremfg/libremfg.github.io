<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Authorization on</title><link>/graphql/authorization/</link><description>Recent content in Authorization on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/graphql/authorization/index.xml" rel="self" type="application/rss+xml"/><item><title>Keycloak Integration</title><link>/graphql/authorization/authorization-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/authorization/authorization-overview/</guid><description>Rhize uses OpenIDConnect to connect to a Keycloak server to authenticate users and manage Role-based access controls.
Overview of OpenIDConnect Open ID Connect is a security architecture that uses JSON Web Tokens (JWTs) to access secured resources. JWT are issued by KeyCloak, and the users can be managed in KeyCloak, or managed in other services like LDAP, Google, Azure AD, Facebook, etc.
When a user accesses the user interface, the UI redirects to Keycloak, which depending on how it is configured, will redirect to the authentication provider so that the user can log in.</description></item><item><title>The @auth Directive in GraphQL</title><link>/graphql/authorization/directive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/authorization/directive/</guid><description>The @auth directive tells Dgraph how to apply authorization. You can use it to define authorization rules for most types (except for union and @remote types). It lets you control which users can run which queries - as well as which users can add, update, and delete data using mutations.
Additionally, you can use this directive with the @secret directive; and, if you specify a password authorization rule, Dgraph will use it to authorize the check&amp;lt;Type&amp;gt;Password query.</description></item><item><title>Mutations and GraphQL Authorization</title><link>/graphql/authorization/mutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/authorization/mutations/</guid><description>Mutations with authorization work like queries. But because mutations involve a state change in the database, it&amp;rsquo;s important to understand when the authorization rules are applied and what they mean.
Add Rules for add authorization state that the rule must hold of nodes created by the mutation data once committed to the database.
For example, a rule such as the following:
type Todo @auth( add: { rule: &amp;#34;&amp;#34;&amp;#34; query ($USER: String!</description></item></channel></rss>