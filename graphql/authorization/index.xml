<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Authorization on</title><link>/graphql/authorization/</link><description>Recent content in Authorization on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/graphql/authorization/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview of Authorization and Authentication with GraphQL</title><link>/graphql/authorization/authorization-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/authorization/authorization-overview/</guid><description>The Rhize GraphQL implementation comes with built-in authorization. This lets you annotate your schema with rules that determine who can query and mutate your data.
First, let&amp;rsquo;s get some concepts defined. There are two important concepts included in what&amp;rsquo;s often called auth:
Authorization: access permissions (what are you allowed to do) Authentication: establishment of identity (who you are) Rhize lets you use your GraphQL schema to manage both authorization and authentication:</description></item><item><title>The @auth Directive in GraphQL</title><link>/graphql/authorization/directive/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/authorization/directive/</guid><description>The @auth directive tells Dgraph how to apply authorization. You can use it to define authorization rules for most types (except for union and @remote types). It lets you control which users can run which queries - as well as which users can add, update, and delete data using mutations.
Additionally, you can use this directive with the @secret directive; and, if you specify a password authorization rule, Dgraph will use it to authorize the check&amp;lt;Type&amp;gt;Password query.</description></item><item><title>Mutations and GraphQL Authorization</title><link>/graphql/authorization/mutations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/authorization/mutations/</guid><description>Mutations with authorization work like queries. But because mutations involve a state change in the database, it&amp;rsquo;s important to understand when the authorization rules are applied and what they mean.
Add Rules for add authorization state that the rule must hold of nodes created by the mutation data once committed to the database.
For example, a rule such as the following:
type Todo @auth( add: { rule: &amp;#34;&amp;#34;&amp;#34; query ($USER: String!</description></item></channel></rss>