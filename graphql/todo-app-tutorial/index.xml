<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>To-Do List App Tutorial on</title><link>/graphql/todo-app-tutorial/</link><description>Recent content in To-Do List App Tutorial on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/graphql/todo-app-tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>/graphql/todo-app-tutorial/todo-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/todo-app-tutorial/todo-overview/</guid><description>This is a simple tutorial that will take you through making a basic to-do list app using Dgraph&amp;rsquo;s GraphQL API and integrating it with third-party authentication (Auth0 or Firebase).
Steps Schema Design Basic UI Add Auth Rules Use Auth0&amp;rsquo;s JWT Use Firebase&amp;rsquo;s JWT Deploy on Dgraph Cloud</description></item><item><title>Schema Design</title><link>/graphql/todo-app-tutorial/todo-schema-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/todo-app-tutorial/todo-schema-design/</guid><description>Let&amp;rsquo;s start with listing down the entities that are involved in a basic todo app.
Task User Equivalent GraphQL schema for the graph above would be as follow:
type Task { ... } type User { ... } What are the fields that these two simple entities contain?
We have a title and a status to check if it was completed or not in the Task type. Then the User type has a username (unique identifier), name and the tasks.</description></item><item><title>Creating a Basic UI</title><link>/graphql/todo-app-tutorial/todo-ui/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/todo-app-tutorial/todo-ui/</guid><description>In this step, we will create a simple to-do app (in React) and integrate it with Auth0.
Create React app Let&amp;rsquo;s start by creating a React app using the create-react-app command.
npx create-react-app todo-react-app To verify navigate to the folder, start the dev server, and visit http://localhost:3000.
cd todo-react-app npm start Refer this step in GitHub.
Install dependencies Now, let&amp;rsquo;s install the various dependencies that we will need in the app.</description></item><item><title>Authorization Rules</title><link>/graphql/todo-app-tutorial/todo-auth-rules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/todo-app-tutorial/todo-auth-rules/</guid><description>In the current state of the app, we can view anyone&amp;rsquo;s todos, but we want our to-dos to be private to us. Let&amp;rsquo;s do that using the @auth directive to limit that to the user&amp;rsquo;s to-dos.
We want to limit the user to its own to-dos, so we will define the query in auth to filter depending on the user&amp;rsquo;s username.
Let&amp;rsquo;s update the schema to include that, and then let&amp;rsquo;s understand what is happening there -</description></item><item><title>Using Auth0</title><link>/graphql/todo-app-tutorial/todo-auth0-jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/todo-app-tutorial/todo-auth0-jwt/</guid><description>Let&amp;rsquo;s start by going to our Auth0 dashboard where we can see the application which we have already created and used in our frontend-application.
Now we want to use the JWT that Auth0 generates, but we also need to add custom claims to that token which will be used by our auth rules. So we can use something known as &amp;ldquo;Rules&amp;rdquo; (left sidebar on dashboard page) to add custom claims to a token.</description></item><item><title>Using Firebase Authentication</title><link>/graphql/todo-app-tutorial/todo-firebase-jwt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/todo-app-tutorial/todo-firebase-jwt/</guid><description>In this step, we will add Firebase authentication per the sample Todo app with Firebase Authentication.
Create Project Let&amp;rsquo;s start by going to the Firebase website and create a new project (Todo-app).
In the Authentication section, enable Email/Password signin. You can add a custom domain to Authorized domains below according to where you want to deploy your app. By defaut localhost is added to the list.
Now we want to use the JWT that Firebase generates, but we also need to add custom claims to that token which will be used by our authorization rules.</description></item><item><title>Deploying on Dgraph Cloud</title><link>/graphql/todo-app-tutorial/deploy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/graphql/todo-app-tutorial/deploy/</guid><description>Let&amp;rsquo;s now deploy our fully functional app on Dgraph Cloud cloud.dgraph.io.
Create a deployment After successfully logging into the site for the first time, your dashboard should look something like this.
Let&amp;rsquo;s go ahead and launch a new deployment.
We named our deployment todo-app-deployment and set the optional subdomain as todo-app, using which the deployment will be accessible. We can choose any subdomain here as long as it is available.</description></item></channel></rss>