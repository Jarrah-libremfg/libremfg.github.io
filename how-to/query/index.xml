<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Query the knowledge graph on</title><link>https://libremfg.github.io/how-to/query/</link><description>Recent content in Query the knowledge graph on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Sep 2023 19:35:35 +1100</lastBuildDate><atom:link href="https://libremfg.github.io/how-to/query/index.xml" rel="self" type="application/rss+xml"/><item><title>GraphQL Directives</title><link>https://libremfg.github.io/how-to/query/directives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/how-to/query/directives/</guid><description>The list of all directives supported by Rhize&amp;rsquo;s implementation of Dgraph.
@auth @auth allows you to define how to apply authorization rules on the queries/mutation for a type.
Reference: Auth directive
@cascade @cascade allows you to filter out certain nodes within a query.
Reference: Cascade
@custom @custom directive is used to define custom queries, mutations and fields.
Reference: Custom directive
@default The @default directive allows you to specify values that should be used when nil values are received for either add mutations or update mutations</description></item><item><title>Use the @default Directive</title><link>https://libremfg.github.io/how-to/query/default/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/how-to/query/default/</guid><description>The @default directive provides default values to be stored when not supplied in a mutation (add/update).
Here&amp;rsquo;s the GraphQL definition of the directives:
directive @default(add: DgraphDefault, update: DgraphDefault) on FIELD_DEFINITION input DgraphDefault { value: String } Syntax:
type Type { field: FieldType @default( add: {value: &amp;#34;value&amp;#34;} update: { value: &amp;#34;value&amp;#34;} ) } Where a value is not provided as input for a mutation, the add value will be used if the node is being created, and the update value will be used if the node exists and is being updated.</description></item><item><title>The @generate Directive</title><link>https://libremfg.github.io/how-to/query/generate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://libremfg.github.io/how-to/query/generate/</guid><description>The @generate directive is used to specify which GraphQL APIs are generated for a given type.
Here&amp;rsquo;s the GraphQL definition of the directive
input GenerateQueryParams { get: Boolean query: Boolean password: Boolean aggregate: Boolean } input GenerateMutationParams { add: Boolean update: Boolean delete: Boolean } directive @generate( query: GenerateQueryParams, mutation: GenerateMutationParams, subscription: Boolean) on OBJECT | INTERFACE The corresponding APIs are generated by setting the Boolean variables inside the @generate directive to true.</description></item></channel></rss>