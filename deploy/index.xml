<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Deploy and Manage on</title><link>/deploy/</link><description>Recent content in Deploy and Manage on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Mar 2017 22:25:17 +1100</lastBuildDate><atom:link href="/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>Dgraph Administration</title><link>/deploy/dgraph-administration/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/dgraph-administration/</guid><description>Each Dgraph Alpha exposes various administrative (admin) endpoints both over HTTP and GraphQL, for example endpoints to export data and to perform a clean shutdown. All such admin endpoints are protected by three layers of authentication:
IP White-listing (use the --security superflag&amp;rsquo;s whitelist option on Dgraph Alpha to whitelist IP addresses other than localhost). Poor-man&amp;rsquo;s auth, if Dgraph Alpha is started with the --security superflag&amp;rsquo;s token option, then you should pass the token as an X-Dgraph-AuthToken header while making the HTTP request.</description></item><item><title>Ports Usage</title><link>/deploy/ports-usage/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/ports-usage/</guid><description>Dgraph cluster nodes use a range of ports to communicate over gRPC and HTTP. Choose these ports carefully based on your topology and mode of deployment, as this will impact the access security rules or firewall configurations required for each port.
Types of ports Dgraph Alpha and Dgraph Zero nodes use a variety of gRPC and HTTP ports, as follows:
gRPC-internal-private: Used between the cluster nodes for internal communication and message exchange.</description></item><item><title>Deployment and Management Overview</title><link>/deploy/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/deploy/overview/</guid><description>You can deploy and manage Dgraph database in a variety of self-managed deployment scenarios, including:
Running Dgraph on your on-premises infrastructure (bare-metal physical servers) Running Dgraph on your cloud infrastructure (AWS, GCP and Azure) This section focuses exclusively on deployment and management for these self-managed scenarios. To learn about fully-managed options that let you focus on building apps and websites, rather than managing infrastructure, see the Dgraph cloud services docs, or Try Dgraph Cloud.</description></item><item><title>Download Dgraph</title><link>/deploy/download/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/download/</guid><description>Dgraph is available to download in a variety of ways:
Tip For a single server setup, recommended for new users, please see Get Started page. Docker docker pull dgraph/dgraph: # You can test that it worked fine, by running: docker run -it dgraph/dgraph: dgraph Automatic download Running
curl https://get.dgraph.io -sSf | bash # Test that it worked fine, by running: dgraph would install the dgraph binary into your system.
Other installation options:</description></item><item><title>Logging</title><link>/deploy/log-format/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/log-format/</guid><description>Dgraph&amp;rsquo;s log format comes from the glog library and is formatted as follows:
Lmmdd hh:mm:ss.uuuuuu threadid file:line] msg... The fields shown above are defined as follows:
Field Definition L A single character, representing the log level (eg &amp;lsquo;I&amp;rsquo; for INFO) mm Month (zero padded; ie May is &amp;lsquo;05&amp;rsquo;) dd Day (zero padded) hh:mm:ss.uuuuuu Time in hours, minutes and fractional seconds threadid Space-padded thread ID as returned by GetTID() file Filename line Line number msg User-supplied message Log verbosity To increase log verbosity, set the flag -v=3 (or -v=2) which will enable verbose logging for everything.</description></item><item><title>TLS Configuration</title><link>/deploy/tls-configuration/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/tls-configuration/</guid><description>Connections between Dgraph database and its clients can be secured using TLS. In addition, Dgraph can now secure gRPC communications between Dgraph Alpha and Dgraph Zero server nodes using mutual TLS (mTLS). Dgraph can now also secure communications over the Dgraph Zero gRPC-external-private port used by Dgraph&amp;rsquo;s Live Loader and Bulk Loader clients. To learn more about the HTTP and gRPC ports used by Dgraph Alpha and Dgraph Zero, see Ports Usage.</description></item><item><title>Configuration</title><link>/deploy/config/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/config/</guid><description>Tip For a single server setup, recommended for new users, please see Get Started page. You can see the list of available subcommands with dgraph --help. You can view the full set of configuration options for a given subcommand with dgraph &amp;lt;subcommand&amp;gt; --help (for example, dgraph zero --help).
You can configure options in multiple ways, which are listed below from highest precedence to lowest precedence:
Using command line flags (as described in the help output).</description></item><item><title>Ludicrous Mode</title><link>/deploy/ludicrous-mode/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/ludicrous-mode/</guid><description>Ludicrous mode is available in Dgraph v20.03.1 and later.
Ludicrous mode allows a Dgraph database to ingest data at an incredibly fast speed, but with fewer guarantees. In normal mode, Dgraph provides strong consistency. In Ludicrous mode, Dgraph provides eventual consistency, so any mutation that succeeds should be available eventually. This means changes are applied more slowly during periods of peak data ingestion, and might not be immediately reflected in query results.</description></item><item><title>Monitoring</title><link>/deploy/monitoring/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/monitoring/</guid><description>Dgraph exposes metrics via the /debug/vars endpoint in json format and the /debug/prometheus_metrics endpoint in Prometheus&amp;rsquo;s text-based format. Dgraph doesn&amp;rsquo;t store the metrics and only exposes the value of the metrics at that instant. You can either poll this endpoint to get the data in your monitoring systems or install Prometheus. Replace targets in the below config file with the ip of your Dgraph instances and run prometheus using the command prometheus --config.</description></item><item><title>More about Dgraph Zero</title><link>/deploy/dgraph-zero/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/dgraph-zero/</guid><description>Dgraph Zero controls the Dgraph cluster, and stores information about it. It automatically moves data between different Dgraph Alpha instances based on the size of the data served by each Alpha instance.
Before you can run dgraph alpha, you must run at least one dgraph zero node. You can see the options available for dgraph zero by using the following command:
dgraph zero --help The --replicas option controls the replication factor: the number of replicas per data shard, including the original shard.</description></item><item><title>Metrics</title><link>/deploy/metrics/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/metrics/</guid><description>Dgraph database provides metrics on Dgraph instance activity, disk activity, server node health, memory, and Raft leadership. It also provides built-in metrics provided by Go. Dgraph metrics follow the metric and label conventions for the Prometheus monitoring and alerting toolkit.
Activity Metrics Activity metrics let you track the mutations, queries, and proposals of a Dgraph instance.
Metric Description go_goroutines Total number of Goroutines currently running in Dgraph. dgraph_active_mutations_total Total number of mutations currently running.</description></item><item><title>More about Dgraph Alpha</title><link>/deploy/dgraph-alpha/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/dgraph-alpha/</guid><description>Dgraph Alpha provides several HTTP endpoints for administrators, as follows:
/health?all returns information about the health of all the servers in the cluster. /admin/shutdown initiates a proper shutdown of the Alpha. By default the Alpha listens on localhost for admin actions (the loopback address only accessible from the same machine). The --bindall=true option binds to 0.0.0.0 and thus allows external connections.
Tip Set max file descriptors to a high value like 10000 if you are going to load a lot of data.</description></item><item><title>Single Host Setup</title><link>/deploy/single-host-setup/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/single-host-setup/</guid><description>Run directly on the host You can run Dgraph directly on a single Linux host. As of release v21.03, Dgraph no longer supports installation on Windows or macOS. To run Dgraph on Windows and macOS, use the standalone Docker image.
Run Dgraph zero dgraph zero --my=IPADDR:5080 The --my flag is the connection that Dgraph alphas would dial to talk to zero. So, the port 5080 and the IP address must be visible to all the Dgraph alphas.</description></item><item><title>Tracing</title><link>/deploy/tracing/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/tracing/</guid><description>Dgraph is integrated with OpenCensus to collect distributed traces from the Dgraph cluster.
Trace data is always collected within Dgraph. You can adjust the trace sampling rate for Dgraph queries using the --trace superflag&amp;rsquo;s ratio option when running Dgraph Alpha nodes. By default, --trace ratio is set to 0.01 to trace 1% of queries.
Examining Traces with zPages The most basic way to view traces is with the integrated trace pages.</description></item><item><title>Data compression on Disk</title><link>/deploy/data-compression/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/data-compression/</guid><description>Dgraph Alpha lets you configure the compression of data on disk using the --badger superflag&amp;rsquo;s compression option. You can choose between the Snappy and Zstandard compression algorithms, or choose not to compress data on disk.
Note This option replaces the --badger.compression_level and --badger.compression options used in earlier Dgraph versions. The following disk compression settings are available:
Setting Notes none Data on disk will not be compressed. zstd:level Use Zstandard compression, with a compression level specified (1-3).</description></item><item><title>Multi-Host Setup</title><link>/deploy/multi-host-setup/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/multi-host-setup/</guid><description>Using Docker Swarm Cluster Setup Using Docker Swarm Note These instructions are for running Dgraph Alpha without TLS config. Instructions for running with TLS refer TLS instructions. Here we&amp;rsquo;ll go through an example of deploying 3 Dgraph Alpha nodes and 1 Zero on three different AWS instances using Docker Swarm with a replication factor of 3.
Make sure you have Docker Machine installed by following instructions. docker-machine --version Create 3 instances on AWS and install Docker Engine on them.</description></item><item><title>Using Kubernetes</title><link>/deploy/kubernetes/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/kubernetes/</guid><description>The following section covers running Dgraph with Kubernetes. We have tested Dgraph with Kubernetes versions 1.14 to 1.16 on GKE and versions 1.14 to 1.17 on EKS.
Note These instructions are for running the Dgraph Alpha service without TLS configuration. To learn how to run Dgraph Alpha with TLS, see TLS Configuration. Install kubectl which is used to deploy and manage applications on kubernetes. Get the Kubernetes cluster up and running on a cloud provider of your choice.</description></item><item><title>Cluster Setup</title><link>/deploy/cluster-setup/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/cluster-setup/</guid><description>Tip For a single server setup, recommended for new users, please see Get Started page. Understanding Dgraph cluster Dgraph is a truly distributed graph database. It shards by predicate and replicates predicates across the cluster, queries can be run on any node and joins are handled over the distributed data. A query is resolved locally for predicates the node stores, and using distributed joins for predicates stored on other nodes.</description></item><item><title>Cluster Checklist</title><link>/deploy/cluster-checklist/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/cluster-checklist/</guid><description>In setting up a cluster be sure the check the following.
Is at least one Dgraph Zero node running? Is each Dgraph Alpha instance in the cluster set up correctly? Will each Dgraph Alpha instance be accessible to all peers on 7080 (+ any port offset)? Does each instance have a unique ID on startup? Has --bindall=true been set for networked communication? See the Production Checklist docs for more info.</description></item><item><title>Production Checklist</title><link>/deploy/production-checklist/</link><pubDate>Mon, 20 Mar 2017 22:25:17 +1100</pubDate><guid>/deploy/production-checklist/</guid><description>This guide describes important setup recommendations for a production-ready Dgraph cluster.
Note In this guide, a node refers to a Dgraph instance unless specified otherwise. A Dgraph cluster is comprised of multiple Dgraph instances (aka nodes) connected together to form a single distributed database. A Dgraph instance is either a Dgraph Zero or Dgraph Alpha, each of which serves a different role in the cluster.
Cluster Requirements A minimum of one Dgraph Zero and one Dgraph Alpha is needed for a working cluster.</description></item><item><title>Data Decryption</title><link>/deploy/decrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/deploy/decrypt/</guid><description>You might need to decrypt data from an encrypted Dgraph cluster for a variety of reasons, including:
Migration of data from an encrypted cluster to a non-encrypted cluster Changing your data or schema by directly editing an RDF file or schema file To support these scenarios, Dgraph includes a decrypt command that decrypts encrypted RDF and schema files. To learn how to export RDF and schema files from Dgraph, see: Dgraph Administration: Export database.</description></item><item><title>Dgraph CLI Reference</title><link>/deploy/cli-command-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/deploy/cli-command-reference/</guid><description>You can use the Dgraph command-line interface (CLI) to deploy and manage Dgraph. You use it in self-managed deployment scenarios; such as running Dgraph on on-premises servers hosted on your physical infrastructure, or running Dgraph in the cloud on your AWS, GCP, or Azure infrastructure.
Dgraph has a root command used throughout its CLI: dgraph. The dgraph command is supported by multiple subcommands (such as alpha or update), some of which are also supported by their own subcommands.</description></item><item><title>Troubleshooting</title><link>/deploy/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/deploy/troubleshooting/</guid><description>This page provides tips on how to troubleshoot issues with running Dgraph.
&amp;ldquo;Too many open files&amp;rdquo; errors If Dgraph logs too many open files errors, you should increase the per-process open file descriptor limit to permit more open files. During normal operations, Dgraph must be able to open many files. Your operating system may have an open file descriptor limit with a low default value that isn&amp;rsquo;t adequate for a database like Dgraph.</description></item></channel></rss>